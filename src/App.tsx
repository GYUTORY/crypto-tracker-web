import React, { lazy, Suspense, useEffect } from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { Toaster } from 'react-hot-toast';
import { ThemeProvider } from './contexts/ThemeContext';
import { AuthProvider } from './contexts/AuthContext';
import { Header } from './components/layout/Header';
import { ErrorBoundary } from './components/ErrorBoundary';
import { initPerformanceMonitoring } from './utils/performance';
import { checkMigrationStatus, monitorWebSocketHealth } from './services/api';
import './App.css';
import './styles/themes.css';

// ÏßÄÏó∞ Î°úÎî©ÏùÑ ÏúÑÌïú ÌéòÏù¥ÏßÄ Ïª¥Ìè¨ÎÑåÌä∏Îì§
const Dashboard = lazy(() => import('./pages/Dashboard'));
const Prices = lazy(() => import('./pages/Prices'));
const Analysis = lazy(() => import('./pages/Analysis'));
const Prediction = lazy(() => import('./pages/Prediction'));
const News = lazy(() => import('./pages/News'));
const Charts = lazy(() => import('./pages/Charts'));
const AIRecommendations = lazy(() => import('./pages/AIRecommendations'));

// Î°úÎî© Ïª¥Ìè¨ÎÑåÌä∏
const LoadingSpinner = () => (
  <div style={{
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    minHeight: '50vh',
    background: 'var(--gradient-primary)',
    color: 'var(--text-primary)'
  }}>
    <div style={{
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      gap: '1rem'
    }}>
      <div style={{
        width: '3rem',
        height: '3rem',
        border: '3px solid var(--border-accent)',
        borderTop: '3px solid var(--text-accent)',
        borderRadius: '50%',
        animation: 'spin 1s linear infinite'
      }}></div>
      <p style={{ fontSize: '1.125rem', fontWeight: '500' }}>ÌéòÏù¥ÏßÄ Î°úÎî© Ï§ë...</p>
    </div>
  </div>
);

/**
 * React Query ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÑ§Ï†ï
 * 
 * ÏÑ§Ï†ï ÎÇ¥Ïö©:
 * - queries: ÏøºÎ¶¨ Í∏∞Î≥∏ ÏÑ§Ï†ï (Ïû¨ÏãúÎèÑ, Ï∫êÏãú ÏãúÍ∞Ñ Îì±)
 * - mutations: ÎÆ§ÌÖåÏù¥ÏÖò Í∏∞Î≥∏ ÏÑ§Ï†ï (Ïû¨ÏãúÎèÑ, ÏßÄÏó∞ ÏãúÍ∞Ñ Îì±)
 * 
 * ÌäπÏßï:
 * - 2Ìöå Ïû¨ÏãúÎèÑ, 1Ï¥à Í∞ÑÍ≤© (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
 * - 3Î∂ÑÍ∞Ñ stale time, 10Î∂ÑÍ∞Ñ garbage collection
 * - ÏúàÎèÑÏö∞ Ìè¨Ïª§Ïä§ Ïãú ÏûêÎèô Ïû¨Í≤ÄÏ¶ù ÎπÑÌôúÏÑ±Ìôî
 * - Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Î∂àÌïÑÏöîÌïú API Ìò∏Ï∂ú Î∞©ÏßÄ
 */
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1,                    // Ïã§Ìå® Ïãú 1Ìöå Ïû¨ÏãúÎèÑ (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
      retryDelay: 1000,            // Ïû¨ÏãúÎèÑ Í∞ÑÍ≤© 1Ï¥à
      staleTime: 5 * 60 * 1000,    // 5Î∂ÑÍ∞Ñ Îç∞Ïù¥ÌÑ∞Î•º freshÎ°ú Ïú†ÏßÄ
      gcTime: 15 * 60 * 1000,      // 15Î∂ÑÍ∞Ñ Ï∫êÏãú Ïú†ÏßÄ
      refetchOnWindowFocus: false, // ÏúàÎèÑÏö∞ Ìè¨Ïª§Ïä§ Ïãú ÏûêÎèô Ïû¨Í≤ÄÏ¶ù ÎπÑÌôúÏÑ±Ìôî
      refetchOnReconnect: false,   // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû¨Ïó∞Í≤∞ Ïãú Ïû¨Í≤ÄÏ¶ù ÎπÑÌôúÏÑ±Ìôî
      refetchOnMount: false,       // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ïû¨Í≤ÄÏ¶ù ÎπÑÌôúÏÑ±Ìôî
    },
    mutations: {
      retry: 1,                    // ÎÆ§ÌÖåÏù¥ÏÖò Ïã§Ìå® Ïãú 1Ìöå Ïû¨ÏãúÎèÑ
      retryDelay: 2000,            // Ïû¨ÏãúÎèÑ Í∞ÑÍ≤© 2Ï¥à
    },
  },
});

/**
 * Î©îÏù∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïª¥Ìè¨ÎÑåÌä∏
 * 
 * Íµ¨ÏÑ± ÏöîÏÜå:
 * - QueryClientProvider: React Query ÏÉÅÌÉú Í¥ÄÎ¶¨
 * - ThemeProvider: Îã§ÌÅ¨/ÎùºÏù¥Ìä∏ ÌÖåÎßà Í¥ÄÎ¶¨
 * - BrowserRouter: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú ÎùºÏö∞ÌåÖ
 * - Header: ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ìó§Îçî
 * - Routes: ÌéòÏù¥ÏßÄ ÎùºÏö∞ÌåÖ
 * - Toaster: ÌÜ†Ïä§Ìä∏ ÏïåÎ¶º ÏãúÏä§ÌÖú
 * 
 * ÎùºÏö∞ÌåÖ Íµ¨Ï°∞:
 * - /: ÎåÄÏãúÎ≥¥Îìú (Î©îÏù∏ ÌéòÏù¥ÏßÄ)
 * - /prices: Í∞ÄÍ≤© Ï°∞Ìöå ÌéòÏù¥ÏßÄ
 * - /analysis: AI Î∂ÑÏÑù ÌéòÏù¥ÏßÄ
 * - /prediction: Í∞ÄÍ≤© ÏòàÏ∏° ÌéòÏù¥ÏßÄ
 * - /news: Îâ¥Ïä§ ÌéòÏù¥ÏßÄ
 * - /charts: Ï∞®Ìä∏ ÌéòÏù¥ÏßÄ
 * - /ai-recommendations: AI Ï∂îÏ≤ú ÌéòÏù¥ÏßÄ
 */
function App() {
  // ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    initPerformanceMonitoring();
    
    // ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉÅÌÉú ÌôïÏù∏
    checkMigrationStatus().then((status) => {
      console.log('üöÄ Ïï± ÏãúÏûë - ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉÅÌÉú:', status);
      
      if (!status.javaServer) {
        console.warn('‚ö†Ô∏è Java ÏÑúÎ≤ÑÍ∞Ä ÏùëÎãµÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÏùºÎ∂Ä Í∏∞Îä•Ïù¥ Ï†úÌïúÎê† Ïàò ÏûàÏäµÎãàÎã§.');
      }
      
      if (!status.nodeServer) {
        console.warn('‚ö†Ô∏è Node.js ÏÑúÎ≤ÑÍ∞Ä ÏùëÎãµÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÏùºÎ∂Ä Í∏∞Îä•Ïù¥ Ï†úÌïúÎê† Ïàò ÏûàÏäµÎãàÎã§.');
      }
    });
    
    // WebSocket ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë
    const stopMonitoring = monitorWebSocketHealth(30000); // 30Ï¥àÎßàÎã§ Ï≤¥ÌÅ¨
    
    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏßÄ
    return () => {
      stopMonitoring();
    };
  }, []);

  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider>
        <AuthProvider>
          <Router>
            <div style={{
              minHeight: '100vh',
              background: 'var(--bg-primary)',
              color: 'var(--text-primary)',
              fontFamily: 'var(--font-family)'
            }}>
              <ErrorBoundary>
                <Header />
                <Suspense fallback={<div>Loading...</div>}>
                  <Routes>
                    <Route path="/" element={<Dashboard />} />
                    <Route path="/prices" element={<Prices />} />
                    <Route path="/charts" element={<Charts />} />
                    <Route path="/news" element={<News />} />
                    <Route path="/analysis" element={<Analysis />} />
                    <Route path="/prediction" element={<Prediction />} />
                    <Route path="/ai-recommendations" element={<AIRecommendations />} />
                  </Routes>
                </Suspense>
                <Toaster
                  position="top-right"
                  toastOptions={{
                    duration: 4000,
                    style: {
                      background: 'var(--bg-secondary)',
                      color: 'var(--text-primary)',
                    },
                  }}
                />
              </ErrorBoundary>
            </div>
          </Router>
        </AuthProvider>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

export default App;
